"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
exports.__esModule = true;
var frame_1 = require("./frame");
var env_1 = require("../utils/env");
var uuid_1 = require("@smm/uuid");
var device_1 = require("./plugins/device");
var session_1 = require("./plugins/session");
var device_2 = require("./result_fn/device");
var time_1 = require("./result_fn/time");
var token_1 = require("./result_fn/token");
var session_2 = require("./result_fn/session");
var app_id_1 = require("./result_fn/app_id");
var path_1 = require("./result_fn/path");
var referrer_1 = require("./result_fn/referrer");
var domain_1 = require("./result_fn/domain");
var query_1 = require("./result_fn/query");
var scheme_1 = require("./result_fn/scheme");
var Sa = /** @class */ (function (_super) {
    __extends(Sa, _super);
    function Sa(isdev, plugins) {
        var _this = _super.call(this, isdev) || this;
        _this.events = [];
        for (var _i = 0, plugins_1 = plugins; _i < plugins_1.length; _i++) {
            var p = plugins_1[_i];
            p.Inject();
        }
        return _this;
    }
    Sa.prototype.setCommon = function (item) {
        this.common = item;
    };
    Sa.prototype.setFlow = function (item) {
        this.events.push(item);
    };
    Sa.prototype.setFlows = function (items) {
        this.events = items;
    };
    Sa.prototype.parse = function () {
        return this.parse_common(this.common, this.events);
    };
    Sa.prototype.parse_common = function (common, events) {
        var result = {};
        for (var key in common) {
            result[key] = common[key]();
        }
        //  events
        var flow = [];
        for (var i = 0; i < (events && events.length); i++) {
            var event_1 = events[i];
            var flow_item = {};
            for (var key in event_1) {
                flow_item[key] = event_1[key]();
            }
            flow.push(flow_item);
        }
        result["flow"] = flow;
        return result;
    };
    Sa.prototype.send_log_events = function (url, cb) {
        this.ajax({
            type: "POST",
            url: url ? url : this.event_url(),
            contentType: "application/json",
            dataType: "json",
            data: JSON.stringify(this.parse()),
            success: function () {
                cb && cb();
            }
        });
    };
    return Sa;
}(frame_1.Frame));
exports.Sa = Sa;
// set Default
var DefaultSa = new Sa(env_1.IsDev(), [
    device_1.DefaultDevicePlugin,
    session_1.DefaultSessionPlugin
]);
exports.DefaultSa = DefaultSa;
var common = {};
var commonKVArray = [
    token_1.tokenKV,
    session_2.sessionidKV,
    session_2.sessionstartidKV,
    time_1.timeKV,
    device_2.deviceKV,
    app_id_1.appIdKV
];
for (var _i = 0, commonKVArray_1 = commonKVArray; _i < commonKVArray_1.length; _i++) {
    var item = commonKVArray_1[_i];
    common[item.name] = item.value;
}
DefaultSa.setCommon(common);
var flow = {};
var flowEventKVArray = [
    {
        name: "flow_id",
        value: uuid_1.UUID.Generate
    },
    {
        name: "flow_type",
        value: function () { return "f"; }
    },
    {
        name: "timestamp",
        value: time_1.time
    },
    scheme_1.schemeKV,
    path_1.pathKV,
    query_1.queryKV,
    domain_1.domainKV,
    referrer_1.referrerKV
];
for (var _a = 0, flowEventKVArray_1 = flowEventKVArray; _a < flowEventKVArray_1.length; _a++) {
    var item = flowEventKVArray_1[_a];
    flow[item.name] = item.value;
}
DefaultSa.setFlow(flow);
if (!window.define) {
    window.smm_spider = Sa;
    window.smm_default_spider = function () {
        DefaultSa.send_log_events();
    };
}
var DefinedSa = function (flow_type, cb, flow_event_type_id, flow_data) {
    var sa = new Sa(env_1.IsDev(), [
        device_1.DefaultDevicePlugin,
        session_1.DefaultSessionPlugin
    ]);
    var common = {};
    var commonKVArray = [
        token_1.tokenKV,
        session_2.sessionidKV,
        session_2.sessionstartidKV,
        time_1.timeKV,
        device_2.deviceKV,
        app_id_1.appIdKV
    ];
    for (var _i = 0, commonKVArray_2 = commonKVArray; _i < commonKVArray_2.length; _i++) {
        var item = commonKVArray_2[_i];
        common[item.name] = item.value;
    }
    sa.setCommon(common);
    var flow = {};
    var flowEventKVArray = [
        {
            name: "flow_id",
            value: uuid_1.UUID.Generate
        },
        {
            name: "flow_type",
            value: function () { return flow_type; }
        },
        {
            name: "timestamp",
            value: time_1.time
        },
        scheme_1.schemeKV,
        path_1.pathKV,
        query_1.queryKV,
        domain_1.domainKV,
        referrer_1.referrerKV
    ];
    // e：事件类型
    if (/^e{1}$/i.test(flow_type)) {
        if (flow_event_type_id) {
            flowEventKVArray.push({
                name: "event_type_id",
                value: function () { return flow_event_type_id; }
            });
        }
        if (flow_data) {
            flowEventKVArray.push({
                name: "data",
                value: function () { return flow_data; }
            });
        }
    }
    for (var _a = 0, flowEventKVArray_2 = flowEventKVArray; _a < flowEventKVArray_2.length; _a++) {
        var item = flowEventKVArray_2[_a];
        flow[item.name] = item.value;
    }
    sa.setFlow(flow);
    sa.send_log_events(undefined, cb);
};
exports.DefinedSa = DefinedSa;
var EventType;
(function (EventType) {
    EventType["click"] = "click";
    EventType["mouseenter"] = "mouseenter";
    EventType["mouseover"] = "mouseover";
    EventType["mouseout"] = "mouseout";
    EventType["unblur"] = "unblur";
    EventType["change"] = "change";
    EventType["hover"] = "hover";
})(EventType || (EventType = {}));
exports.EventType = EventType;
var ClassDefinedSa = function (obj) {
    if (Object.prototype.toString.call(obj.className) === '[object Array]') {
        var list = obj.className;
        for (var i = 0; i < list.length; i++) {
            runDinedSa(obj);
        }
    }
    else {
        runDinedSa(obj);
    }
};
exports.ClassDefinedSa = ClassDefinedSa;
var runDinedSa = function (obj) {
    var className = obj.className;
    document.querySelector(className).addEventListener(obj.eventType, function () {
        DefinedSa(obj.flow_type, obj.cb, obj.event_type_id, obj.data);
    });
};
window.smm_defined_spider = DefinedSa;
window.ClassEventDefinedSa = ClassDefinedSa;
