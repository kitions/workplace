import { Plugin, ResultFn, Results } from "./interface";
import { Frame } from "./frame";
declare class Sa extends Frame {
    private common;
    private events;
    constructor(isdev: boolean, plugins: Plugin[]);
    setCommon(item: ResultFn): void;
    setFlow(item: ResultFn): void;
    setFlows(items: ResultFn[]): void;
    parse(): Results;
    parse_common(common: ResultFn, events: ResultFn[]): Results;
    send_log_events(url?: string, cb?: Function): void;
}
declare let DefaultSa: Sa;
declare let DefinedSa: Function;
declare enum EventType {
    click = "click",
    mouseenter = "mouseenter",
    mouseover = "mouseover",
    mouseout = "mouseout",
    unblur = "unblur",
    change = "change",
    hover = "hover"
}
interface ClassObj {
    className: string | string[];
    eventType: EventType;
    flow_type: string;
    cb: Function;
    event_type_id?: number;
    data?: any;
}
declare let ClassDefinedSa: (obj: ClassObj) => void;
export { Sa, DefaultSa, DefinedSa, ClassDefinedSa, EventType };
