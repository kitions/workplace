"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
exports.__esModule = true;
var uuid_1 = require("@smm/uuid");
var cookie_1 = require("@smm/cookie");
var env_1 = require("../../utils/env");
var frame_1 = require("../frame");
var const_1 = require("../const");
var Session = /** @class */ (function (_super) {
    __extends(Session, _super);
    function Session(isdev) {
        return _super.call(this, isdev) || this;
    }
    Session.prototype.Inject = function () {
        this._init();
        this._event();
    };
    // 初始化
    Session.prototype._init = function () {
        var session_id = cookie_1.Cookie.Get(const_1.SessionCookieID) || uuid_1.UUID.Generate();
        var now = new Date();
        var start_time = cookie_1.Cookie.Get(const_1.SessionStartTimeCookieID) || String(now.getTime());
        if (env_1.IsMetal()) {
            // 英文站
            this._cookieSet(session_id, start_time, const_1.MetalCookieDomin);
        }
        else if (env_1.IsMMIPrice()) {
            // MMIPrice
            this._cookieSet(session_id, start_time, const_1.MMIPriceCookieDomin);
        }
        else {
            // 中文站 默认domain smm.cn
            this._cookieSet(session_id, start_time);
        }
    };
    // 置放cookie
    Session.prototype._cookieSet = function (session_id, start_time, domain) {
        cookie_1.Cookie.Set(const_1.SessionCookieID, session_id, 1 / (24 * 2), domain ? domain : cookie_1.Cookie.DOMAIN); // 设置半小时
        cookie_1.Cookie.Set(const_1.SessionStartTimeCookieID, start_time, 1 / (24 * 2), domain ? domain : cookie_1.Cookie.DOMAIN); // 设置半小时
    };
    // 事件
    Session.prototype._event = function () {
        var _this = this;
        var filter = false;
        ['click', 'mouseover', 'keydown'].forEach(function (item) {
            document.addEventListener(item, function () {
                if (!filter) {
                    filter = true;
                    _this._init();
                    setTimeout(function () {
                        filter = false;
                    }, 1000);
                }
            });
        });
    };
    return Session;
}(frame_1.Frame));
exports.Session = Session;
var DefaultSessionPlugin = new Session(env_1.IsDev());
exports.DefaultSessionPlugin = DefaultSessionPlugin;
